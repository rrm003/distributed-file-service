package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"sync"
	"time"

	pb "github.com/rrm003/grpc/file_management/file_management"

	"github.com/spf13/cobra"
	"google.golang.org/grpc"
)

const (
	address         = "localhost:50051"
	uploadsFolder   = "uploads"
	downloadsFolder = "downloads"
)

var (
	rootCmd = &cobra.Command{Use: "fileclient"}
)

type client struct {
	pb.FileServiceClient
	mu sync.Mutex
}

type fileInfo struct {
	Name             string
	ModificationTime time.Time
}

func main() {
	// Initialize the gRPC connection and client.
	conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalf("Could not connect: %v", err)
	}
	defer conn.Close()

	c := pb.NewFileServiceClient(conn)
	client := &client{FileServiceClient: c}

	go client.SynchronizeFolder()

	// Add commands to the CLI
	rootCmd.AddCommand(uploadCmd(client))
	rootCmd.AddCommand(downloadCmd(client))
	rootCmd.AddCommand(deleteCmd(client))
	rootCmd.AddCommand(renameCmd(client))

	// Execute the CLI commands
	if err := rootCmd.Execute(); err != nil {
		log.Fatalf("Error executing command: %v", err)
	}

	select {}
}

// Helper function to create a file stream for uploading.
func createUploadStream(client pb.FileServiceClient) (pb.FileService_UploadFileClient, error) {
	stream, err := client.UploadFile(context.Background())
	if err != nil {
		return nil, err
	}

	return stream, nil
}

// Helper function to send the file name to the server.
func sendFileName(stream pb.FileService_UploadFileClient, fileName string) error {
	return stream.Send(&pb.FileChunk{Data: []byte(fileName)})
}

// Helper function to send file data to the server.
func sendFileData(stream pb.FileService_UploadFileClient, data []byte) error {
	fmt.Println("client sending file chuncks")
	return stream.Send(&pb.FileChunk{Data: data})
}

// Helper function to close the file stream.
func closeFileStream(stream pb.FileService_UploadFileClient) error {
	_, err := stream.CloseAndRecv()
	return err
}

// Helper function to download a file from the server.
func downloadFile(client pb.FileServiceClient, fileName, filePath string) {
	stream, err := client.DownloadFile(context.Background(), &pb.FileRequest{FileName: fileName})
	if err != nil {
		log.Fatalf("Could not download file: %v", err)
	}
	defer stream.CloseSend()

	file, err := os.Create(filePath + "/" + fileName)
	if err != nil {
		log.Fatalf("Could not create file: %v", err)
	}
	defer file.Close()

	for {
		resp, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatalf("Error receiving file data: %v", err)
		}

		data := resp.Data
		_, err = file.Write(data)
		if err != nil {
			log.Fatalf("Error writing file: %v", err)
		}
	}

	fmt.Printf("File %s downloaded to %s\n", fileName, filePath)
}

// Helper function to delete a file on the server.
func deleteFile(client pb.FileServiceClient, fileName string) {

	//delete local file
	err := os.Remove(downloadsFolder + "/" + fileName)
	if err != nil {
		log.Fatalf("Could not delete local file: %v", err)
	}

	// delete server file
	resp, err := client.DeleteFile(context.Background(), &pb.FileRequest{FileName: fileName})
	if err != nil {
		log.Fatalf("Could not delete server file: %v", err)
	}

	fmt.Println(resp.Message)
}

// Helper function to rename a file on the server.
func renameFile(client pb.FileServiceClient, oldFileName, newFileName string) {
	// rename local file
	err := os.Rename(downloadsFolder+"/"+oldFileName, downloadsFolder+"/"+newFileName)
	if err != nil {
		log.Fatalf("Could not rename local file: %v", err)
	}

	// rename server file
	// go func() {
	resp, err := client.RenameFile(context.Background(), &pb.RenameRequest{OldFileName: oldFileName, NewFileName: newFileName})
	if err != nil {
		log.Fatalf("Could not rename server file: %v", err)
	}

	fmt.Println(resp.Message)
	// }()
}

// CLI command for file upload.
func uploadCmd(client *client) *cobra.Command {
	var filePath string
	var fileName string

	cmd := &cobra.Command{
		Use:   "upload",
		Short: "Upload a file to the server",
		Run: func(cmd *cobra.Command, args []string) {
			stream, err := createUploadStream(client.FileServiceClient)
			if err != nil {
				log.Fatalf("Could not create upload stream: %v", err)
			}
			defer closeFileStream(stream)

			file, err := os.Open(filePath)
			if err != nil {
				log.Fatalf("Could not open file: %v", err)
			}
			defer file.Close()

			if err := sendFileName(stream, fileName); err != nil {
				log.Fatalf("Error sending file name: %v", err)
			}

			buffer := make([]byte, 1024)
			for {
				n, err := file.Read(buffer)
				if err == io.EOF {
					break
				}
				if err != nil {
					log.Fatalf("Error reading file: %v", err)
				}

				if err := sendFileData(stream, buffer[:n]); err != nil {
					log.Fatalf("Error sending file data: %v", err)
				}
			}
		},
	}

	cmd.Flags().StringVarP(&filePath, "file", "f", "", "Path to the file to upload")
	cmd.Flags().StringVarP(&fileName, "name", "n", "", "Name to use for the uploaded file on the server")

	cmd.MarkFlagRequired("file")
	cmd.MarkFlagRequired("name")

	return cmd
}

// CLI command for file download.
func downloadCmd(client *client) *cobra.Command {
	var fileName string
	var filePath string

	cmd := &cobra.Command{
		Use:   "download",
		Short: "Download a file from the server",
		Run: func(cmd *cobra.Command, args []string) {
			downloadFile(client.FileServiceClient, fileName, filePath)
		},
	}

	cmd.Flags().StringVarP(&fileName, "file", "f", "", "Name of the file to download")
	cmd.Flags().StringVarP(&filePath, "path", "p", "", "Path to save the downloaded file")

	cmd.MarkFlagRequired("file")
	cmd.MarkFlagRequired("path")

	return cmd
}

// CLI command for file deletion.
func deleteCmd(client *client) *cobra.Command {
	var fileName string

	cmd := &cobra.Command{
		Use:   "delete",
		Short: "Delete a file on the server",
		Run: func(cmd *cobra.Command, args []string) {
			deleteFile(client.FileServiceClient, fileName)
		},
	}

	cmd.Flags().StringVarP(&fileName, "file", "f", "", "Name of the file to delete")
	cmd.MarkFlagRequired("file")

	return cmd
}

// CLI command for file renaming.
func renameCmd(client *client) *cobra.Command {
	var oldFileName string
	var newFileName string

	cmd := &cobra.Command{
		Use:   "rename",
		Short: "Rename a file on the server",
		Run: func(cmd *cobra.Command, args []string) {
			renameFile(client.FileServiceClient, oldFileName, newFileName)
		},
	}

	cmd.Flags().StringVarP(&oldFileName, "old", "o", "", "Current name of the file")
	cmd.Flags().StringVarP(&newFileName, "new", "n", "", "New name for the file")

	cmd.MarkFlagRequired("old")
	cmd.MarkFlagRequired("new")

	return cmd
}

// SynchronizeFolder periodically checks for changes in the synchronized folder and synchronizes with the server.
func (c *client) SynchronizeFolder() {
	for {
		c.mu.Lock()
		localFiles, err := c.getLocalFilesInfo()
		c.mu.Unlock()

		if err != nil {
			log.Printf("Error getting local files info: %v", err)
			// Handle the error as needed
		} else {
			c.mu.Lock()
			serverFiles, err := c.getServerFilesInfo()
			c.mu.Unlock()

			if err != nil {
				log.Printf("Error getting server files info: %v", err)
				// Handle the error as needed
			} else {
				// Synchronize files
				c.synchronizeFiles(localFiles, serverFiles)
			}
		}

		// Sleep for a specified interval before the next check
		// Adjust the interval as needed
		time.Sleep(5 * time.Second)
	}
}

// Helper function to get local files' information (name and modification time).
func (c *client) getLocalFilesInfo() ([]fileInfo, error) {
	var filesInfo []fileInfo

	files, err := os.ReadDir(downloadsFolder)
	if err != nil {
		return nil, err
	}

	for _, file := range files {
		fi, _ := file.Info()

		info := fileInfo{
			Name:             fi.Name(),
			ModificationTime: fi.ModTime(),
		}

		filesInfo = append(filesInfo, info)
	}

	return filesInfo, nil
}

// Helper function to get server files' information (name and modification time).
func (c *client) getServerFilesInfo() ([]fileInfo, error) {
	resp, err := c.ListFiles(context.Background(), &pb.Empty{})
	if err != nil {
		return nil, err
	}

	var filesInfo []fileInfo
	for _, file := range resp.Files {
		info := fileInfo{
			Name:             file.FileName,
			ModificationTime: time.Unix(file.ModificationTime, 0),
		}

		filesInfo = append(filesInfo, info)
	}

	return filesInfo, nil
}

// Helper function to synchronize local and server files.
func (c *client) synchronizeFiles(localFiles, serverFiles []fileInfo) {
	// Synchronize files: upload, download, delete, rename
	// Compare localFiles and serverFiles based on modification times
	// Perform necessary operations
	fmt.Println("localFiles", localFiles)
	for _, localFile := range localFiles {
		serverFile := findFileByName(serverFiles, localFile.Name)

		if serverFile == nil {
			// File exists locally but not on the server, upload it
			fmt.Println(localFile.Name, "File exists locally but not on the server, upload it")
			c.uploadFile(localFile.Name, downloadsFolder)
		} else if localFile.ModificationTime.After(serverFile.ModificationTime) {
			// Local file has been modified, upload it
			fmt.Println(localFile.Name, "Local file has been modified, upload it")
			c.uploadFile(localFile.Name, downloadsFolder)
		}
	}

	// fmt.Println("serverFiles", serverFiles)
	// for _, serverFile := range serverFiles {
	// 	localFile := findFileByName(localFiles, serverFile.Name)
	// 	if localFile == nil {
	// 		// File exists on the server but not locally, download it
	// 		fmt.Println(serverFile.Name, "File exists on the server but not locally, download it")
	// 		downloadFile(c.FileServiceClient, serverFile.Name, downloadsFolder)
	// 	}
	// }
}

func (c *client) uploadFile(fileName, uploadFolder string) error {
	filePath := filepath.Join(downloadsFolder, fileName)
	return sendFile(c, fileName, filePath)
}

// Helper function to find a file by name in a slice of files.
func findFileByName(files []fileInfo, name string) *fileInfo {
	for _, file := range files {
		if file.Name == name {
			return &file
		}
	}

	return nil
}

// Helper function to send a file to the server.
func sendFile(client *client, fileName, filePath string) error {
	// Create an upload stream
	stream, err := createUploadStream(client.FileServiceClient)
	if err != nil {
		return err
	}
	defer func() {
		err := stream.CloseSend()
		if err != nil {
			log.Printf("Error closing stream: %v", err)
		}
	}()

	// Send the file name
	err = sendFileName(stream, fileName)
	if err != nil {
		return err
	}

	fmt.Println("-------fiepath", filePath)
	// Open the file
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer func() {
		err := file.Close()
		if err != nil {
			log.Printf("Error closing file: %v", err)
		}
	}()

	// Send file data in chunks
	buffer := make([]byte, 4096) // Adjust the buffer size as needed
	for {
		n, err := file.Read(buffer)
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}

		err = sendFileData(stream, buffer[:n])
		if err != nil {
			return err
		}
	}

	return nil
}
